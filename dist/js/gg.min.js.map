{"version":3,"sources":["../../src/Card.js","../../index.js"],"names":["GCard","anchor","position","content","options","arguments","length","undefined","_classCallCheck","this","defaults","showPrev","canFinish","Object","assign","element","createElement","_createClass","key","value","card","document","className","innerHTML","footer","footerLeft","footerCenter","footerRight","append","prev","setAttribute","textContent","addEventListener","onPrev","finish","onFinish","next","onNext","arrow","getBoundingClientRect","top","window","pageYOffset","left","pageXOffset","anchorCoordinates","getAnchorCoordinates","style","offsetWidth","offsetHeight","GGuide","cards","_this","_defineProperty","showNext","end","firstCard","currentStep","parseInt","steps","createSteps","bind","stepList","i","getAnchor","selector","step","cardOptions","cardStep","push","console","warn","drawStep","removeStep","nextStep","onChange","prevStep","scrollIntoView","behavior","block","inline","body","getElement","setCardInPosition","remove","querySelector"],"mappings":"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","sourcesContent":["export class GCard {\n    /**\n     * @param {Object} anchor the element to point to\n     * @param {String} position the position of the card, relative to anchor\n     * @param {String} content the text of the card\n     * @param {Object} options the options\n     */\n    constructor(anchor, position, content, options = {}) {\n        const defaults = {\n            showPrev: true,\n            canFinish: true,\n        };\n\n        this.anchor = anchor;\n        this.position = position;\n        this.content = content;\n\n        this.options = Object.assign({}, defaults, options);\n\n        this.element = this.createElement();\n    }\n\n    /**\n     * Gets the DOM element representing the card.\n     */\n    getElement() {\n        return this.element;\n    }\n\n    /**\n     * Creates the DOM element representing the card.\n     */\n    createElement() {\n        const card = document.createElement('div');\n        card.className = 'gg-card';\n\n        const content = document.createElement('div');\n        content.className = 'gg-card-content';\n        content.innerHTML = this.content;\n\n        const footer = document.createElement('div');\n        footer.className = 'gg-card-footer';\n\n        const footerLeft = document.createElement('div');\n        footerLeft.className = 'gg-card-footer-left';\n\n        const footerCenter = document.createElement('div');\n        footerCenter.className = 'gg-card-footer-center';\n\n        const footerRight = document.createElement('div');\n        footerRight.className = 'gg-card-footer-right';\n\n        footer.append(footerLeft);\n        footer.append(footerCenter);\n        footer.append(footerRight);\n\n        if (this.options.showPrev) {\n            const prev = document.createElement('a');\n            prev.setAttribute('role', 'button');\n            prev.textContent = '<< prev';\n            prev.addEventListener('click', this.options.onPrev, false);\n\n            footerLeft.append(prev);\n        }\n\n        if (this.options.canFinish) {\n            const finish = document.createElement('a');\n            finish.setAttribute('role', 'button');\n            finish.className = 'gg-card-action-finish';\n            finish.textContent = 'end it now';\n\n            finish.addEventListener('click', this.options.onFinish, false);\n\n            footerCenter.append(finish);\n        }\n\n        const next = document.createElement('a');\n        next.setAttribute('role', 'button');\n        next.className = 'gg-card-action-next';\n        next.textContent = 'Got it!';\n        next.addEventListener('click', this.options.onNext, false);\n\n        footerRight.append(next);\n\n        const arrow = document.createElement('div');\n        arrow.className = 'gg-card-arrow';\n\n        card.append(content);\n        card.append(footer);\n        card.append(arrow);\n\n        return card;\n    }\n\n    /**\n     * Gets the coordinates of the anchor in the page.\n     *\n     * @return {Object}\n     */\n    getAnchorCoordinates() {\n        const position = this.anchor.getBoundingClientRect();\n\n        return {\n            top: position.top + window.pageYOffset,\n            left: position.left + window.pageXOffset,\n        };\n    }\n\n    /**\n     * Add classes and styles to positioning the card element.\n     */\n    setCardInPosition() {\n        const anchorCoordinates = this.getAnchorCoordinates();\n\n        switch (this.position) {\n            case 'top':\n            default:\n                this.element.className += ' gg-card-top';\n                this.element.style.left =\n                    anchorCoordinates.left -\n                    this.element.offsetWidth / 2 +\n                    this.anchor.offsetWidth / 2 +\n                    'px';\n                this.element.style.top =\n                    anchorCoordinates.top - this.element.offsetHeight - 15 + 'px';\n                break;\n            case 'right':\n                this.element.className += ' gg-card-right';\n                this.element.style.left =\n                    anchorCoordinates.left + this.anchor.offsetWidth + 15 + 'px';\n                this.element.style.top =\n                    anchorCoordinates.top -\n                    this.element.offsetHeight / 2 +\n                    this.anchor.offsetHeight / 2 +\n                    'px';\n                break;\n            case 'bottom':\n                this.element.className += ' gg-card-bottom';\n                this.element.style.left =\n                    anchorCoordinates.left -\n                    this.element.offsetWidth / 2 +\n                    this.anchor.offsetWidth / 2 +\n                    'px';\n                this.element.style.top =\n                    anchorCoordinates.top + this.anchor.offsetHeight + 15 + 'px';\n                break;\n            case 'left':\n                this.element.className += ' gg-card-left';\n                this.element.style.left =\n                    anchorCoordinates.left - this.element.offsetWidth - 15 + 'px';\n                this.element.style.top =\n                    anchorCoordinates.top -\n                    this.element.offsetHeight / 2 +\n                    this.anchor.offsetHeight / 2 +\n                    'px';\n                break;\n        }\n    }\n}\n","import { GCard } from './src/Card';\n\nexport default class GGuide {\n    /**\n     * @param {object} cards the cards of the guide\n     * @param {object} options the client options\n     *\n     * @return {GGuide}\n     */\n    constructor(cards, options = {}) {\n        const defaults = {\n            firstCard: 0,\n            showPrev: true,\n            canFinish: true,\n        };\n\n        this.options = Object.assign({}, defaults, options);\n\n        this.currentStep =\n            typeof this.options.firstCard === 'string'\n                ? parseInt(this.options.firstCard, 10)\n                : this.options.firstCard;\n\n        this.steps = this.createSteps(cards);\n\n        this.onNext = this.onNext.bind(this);\n        this.onPrev = this.onPrev.bind(this);\n        this.onFinish = this.onFinish.bind(this);\n\n        return this;\n    }\n\n    /**\n     * Next card event callback.\n     */\n    onNext = () => {\n        this.showNext();\n    };\n\n    /**\n     * Prev card event callback.\n     */\n    onPrev = () => {\n        this.showPrev();\n    };\n\n    /**\n     * Finish guide event callback.\n     */\n    onFinish = () => {\n        this.end();\n    };\n\n    /**\n     * Create the steps based on the client's cards.\n     *\n     * @param {Object} cards the card object of the client\n     * @return {Object[]}\n     */\n    createSteps(cards) {\n        const stepList = [];\n\n        for (let i = 0; i < cards.length; i++) {\n            const anchor = this.getAnchor(cards[i].selector);\n\n            if (anchor) {\n                const step = {};\n\n                step.anchor = anchor;\n                step.position = cards[i].position;\n                step.content = cards[i].content;\n\n                step.prev = stepList && stepList.length ? stepList[stepList.length - 1] : null;\n                step.next = null;\n                if (step.prev !== null) {\n                    step.prev.next = step;\n                }\n\n                const cardOptions = typeof cards[i].options !== 'undefined' ? cards[i].options : {};\n\n                const canFinish =\n                    typeof cardOptions.canFinish !== 'undefined' ? cardOptions.canFinish : true;\n\n                const defaults = {\n                    showPrev: this.options.showPrev ? step.prev !== null : false,\n                    canFinish: this.options.canFinish ? canFinish : false,\n                    cardStep: i,\n                    onNext: this.onNext,\n                    onPrev: this.onPrev,\n                    onFinish: this.onFinish,\n                };\n\n                const options = Object.assign({}, defaults, cards[i].options);\n\n                const card = new GCard(step.anchor, step.position, step.content, options);\n                step.card = card;\n\n                stepList.push(step);\n            } else {\n                console.warn(\n                    \"GGuide: The card with selector '\" +\n                        cards[i].selector +\n                        \"' was ignored since no DOM element was found.\"\n                );\n            }\n        }\n\n        return stepList;\n    }\n\n    /**\n     * Starts the guide.\n     *\n     * @return {GGuide}\n     */\n    begin() {\n        this.drawStep(this.steps[this.currentStep]);\n\n        return this;\n    }\n\n    /**\n     * Ends the guide.\n     *\n     * @return {GGuide}\n     */\n    end() {\n        this.removeStep(this.steps[this.currentStep]);\n        this.currentStep = this.options.firstCard;\n\n        if (\n            typeof this.options.onFinish !== 'undefined' &&\n            typeof this.options.onFinish === 'function'\n        ) {\n            this.options.onFinish();\n        }\n\n        return this;\n    }\n\n    /**\n     * Display the next card or end the guide.\n     */\n    showNext() {\n        const currentStep = this.steps[this.currentStep];\n\n        if (this.steps[this.currentStep].next !== null) {\n            const nextStep = (this.currentStep += 1);\n\n            this.removeStep(currentStep);\n            this.drawStep(currentStep.next);\n\n            this.currentStep = nextStep;\n\n            if (\n                typeof this.options.onNext !== 'undefined' &&\n                typeof this.options.onNext === 'function'\n            ) {\n                this.options.onNext(nextStep);\n            }\n\n            if (\n                typeof this.options.onChange !== 'undefined' &&\n                typeof this.options.onChange === 'function'\n            ) {\n                this.options.onChange(nextStep);\n            }\n        } else {\n            this.end();\n        }\n    }\n\n    /**\n     * Display the previous card if apply.\n     */\n    showPrev() {\n        const currentStep = this.steps[this.currentStep];\n\n        if (this.steps[this.currentStep].prev !== null) {\n            const prevStep = (this.currentStep -= 1);\n\n            this.removeStep(currentStep);\n            this.drawStep(currentStep.prev);\n\n            this.currentStep = prevStep;\n\n            if (\n                typeof this.options.onPrev !== 'undefined' &&\n                typeof this.options.onPrev === 'function'\n            ) {\n                this.options.onPrev(prevStep);\n            }\n\n            if (\n                typeof this.options.onChange !== 'undefined' &&\n                typeof this.options.onChange === 'function'\n            ) {\n                this.options.onChange(prevStep);\n            }\n        }\n    }\n\n    /**\n     * Draws the card corresponding to the step.\n     *\n     * @param {Object} step the step that owns the card to draw\n     */\n    drawStep(step) {\n        step.anchor.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center',\n            inline: 'nearest',\n        });\n        document.body.append(step.card.getElement());\n\n        step.card.setCardInPosition();\n    }\n\n    /**\n     * Removes the card corresponding to the step.\n     *\n     * @param {Object} step the step that owns the card to remove\n     */\n    removeStep(step) {\n        step.card.getElement().remove();\n    }\n\n    /**\n     * Select a DOM element based on selector.\n     *\n     * @param {String} selector\n     */\n    getAnchor(selector) {\n        const anchor = document.querySelector(selector);\n\n        if (typeof anchor != 'undefined' && anchor != null) {\n            return anchor;\n        }\n\n        return false;\n    }\n}\n"]}